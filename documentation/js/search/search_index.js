var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.12,1,1.894]],["body/controllers/AppController.html",[0,1.84,1,3.112,2,1.501,3,0.575,4,0.502,5,0.502,6,3.354,7,0.706,8,0.037,9,1.013,10,2.689,11,3.354,12,0.575,13,0.076,14,2.887,15,1.829,16,0.031,17,0.031]],["title/modules/AppModule.html",[18,1.12,19,1.894]],["body/modules/AppModule.html",[1,2.875,2,1.488,3,0.415,4,0.362,5,0.362,7,0.76,8,0.037,9,0.73,10,2.678,11,2.419,12,0.415,13,0.055,16,0.025,17,0.025,18,1.7,19,3.657,20,1.319,21,1.319,22,1.63,23,1.63,24,1.319,25,2.559,26,1.63,27,2.419,28,2.419,29,2.419,30,2.678,31,2.985,32,2.416,33,2.24,34,1.63,35,1.63,36,2.931,37,2.516,38,2.931,39,2.931,40,2.931,41,2.931]],["title/injectables/AppService.html",[10,1.513,42,1.12]],["body/injectables/AppService.html",[3,0.551,4,0.481,5,0.481,7,0.551,8,0.037,9,0.971,10,2.421,12,0.551,13,0.073,16,0.03,17,0.03,42,1.792,43,2.165,44,3.214,45,0.875,46,2.421,47,5.534,48,1.184,49,3.894,50,1.943,51,1.792,52,1.943,53,3.894,54,3.894]],["title/controllers/AuthController.html",[0,1.12,55,1.894]],["body/controllers/AuthController.html",[0,1.484,2,1.484,3,0.569,4,0.497,5,0.497,7,0.701,8,0.037,9,1.002,12,0.569,13,0.076,14,2.856,15,1.809,16,0.03,17,0.03,55,3.091,56,3.318,57,2.856,58,3.318,59,2.414,60,3.318,61,4.019]],["title/modules/AuthModule.html",[18,1.12,30,1.513]],["body/modules/AuthModule.html",[2,1.577,3,0.452,4,0.395,5,0.395,7,0.727,8,0.037,9,0.796,12,0.452,13,0.06,16,0.026,17,0.026,18,1.776,20,1.438,21,1.438,22,1.776,23,1.776,24,1.438,25,2.675,26,2.675,30,2.806,32,1.922,33,2.374,34,1.776,35,1.776,37,1.995,55,3.004,59,2.672,60,2.636,62,2.636,63,2.636,64,2.636,65,3.194,66,2.667,67,3.194,68,2.636]],["title/injectables/AuthService.html",[42,1.12,59,1.365]],["body/injectables/AuthService.html",[3,0.338,4,0.295,5,0.295,7,0.493,8,0.037,9,0.595,12,0.338,13,0.045,15,1.074,16,0.021,17,0.021,42,1.286,43,1.327,45,0.537,46,1.738,48,1.25,50,2.256,51,2.033,52,1.738,59,1.568,66,1.491,69,1.97,70,2.791,71,3.732,72,4.521,73,2.175,74,2.387,75,2.111,76,2.387,77,1.937,78,1.937,79,1.059,80,1.568,81,2.387,82,3.483,83,3.483,84,3.394,85,2.569,86,2.387,87,1.696,88,1.696,89,1.97,90,1.491,91,2.651,92,1.491,93,1.97,94,1.491,95,2.387,96,1.696,97,2.387,98,2.387,99,2.387,100,2.387,101,3.394,102,2.387,103,2.387,104,2.387,105,1.97,106,2.387,107,2.387,108,1.696,109,2.387,110,1.97,111,1.97,112,3.483,113,2.387,114,1.97,115,2.387,116,1.696,117,2.387,118,1.491,119,2.387,120,3.483,121,1.491,122,1.97,123,1.97,124,1.97]],["title/classes/CreatePostDto.html",[13,0.057,125,1.686]],["body/classes/CreatePostDto.html",[3,0.163,4,0.142,5,0.142,7,0.516,8,0.038,12,0.163,13,0.048,16,0.012,17,0.012,45,0.259,48,1.341,51,1.872,79,1.56,80,2.096,116,0.818,118,1.588,121,1.22,124,2.769,125,1.086,126,0.518,127,3.227,128,0.818,129,1.145,130,3.01,131,2.543,132,2.543,133,3.376,134,2.543,135,2.996,136,3.355,137,3.355,138,3.208,139,1.986,140,2.769,141,2.044,142,3.239,143,1.151,144,1.151,145,1.952,146,1.952,147,3.376,148,1.151,149,1.151,150,1.872,151,1.151,152,2.996,153,1.387,154,1.612,155,1.952,156,1.151,157,1.151,158,1.151,159,1.952,160,2.419,161,2.996,162,3.646,163,1.151,164,1.151,165,1.952,166,1.612,167,1.612,168,1.952,169,1.952,170,1.151,171,1.151,172,1.952,173,2.543,174,1.952,175,1.612,176,1.952,177,1.952,178,1.952,179,1.952,180,1.952,181,1.151,182,1.151,183,1.151,184,0.95,185,2.996,186,1.151,187,2.996,188,2.996,189,1.612,190,1.952,191,1.952,192,1.387,193,1.952,194,1.952,195,1.151,196,2.769,197,1.151,198,1.151,199,1.952,200,1.151,201,2.996,202,1.151,203,1.151,204,1.151,205,1.151,206,1.151,207,2.543,208,1.151,209,1.952,210,1.952,211,2.096,212,2.762,213,2.384,214,1.952,215,0.95,216,0.95,217,1.952,218,0.574,219,1.151,220,1.151,221,0.818,222,1.387,223,1.151,224,0.818,225,2.384,226,3.208,227,0.574,228,1.151,229,1.952,230,1.151,231,1.151,232,1.151,233,1.151,234,1.151,235,1.952,236,1.952,237,1.151,238,1.151,239,1.151,240,0.95,241,1.952,242,0.95,243,1.151,244,0.95,245,0.95,246,2.099,247,1.151,248,1.151,249,0.818,250,1.151]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.057,150,1.894]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.499,4,0.436,5,0.436,7,0.499,8,0.037,12,0.499,13,0.086,16,0.028,17,0.028,45,0.793,48,1.385,51,1.683,79,1.385,121,3.153,126,1.587,127,3.587,129,2.051,139,2.051,141,2.272,150,2.846,211,3.333,213,3.237,218,1.759,222,3.587,246,4.167,251,2.91,252,3.526,253,3.526,254,3.526]],["title/classes/CreateUserDto.html",[13,0.057,255,1.686]],["body/classes/CreateUserDto.html",[3,0.364,4,0.317,5,0.317,7,0.364,8,0.037,12,0.364,13,0.069,16,0.023,17,0.023,45,0.577,48,1.422,51,2.001,79,1.422,84,3.537,87,3.045,126,1.156,129,1.652,139,2.105,189,3.031,211,2.921,212,2.608,213,3.322,215,3.031,216,2.12,218,1.281,244,3.031,255,2.041,256,4.084,257,1.824,258,3.537,259,4.285,260,2.568,261,2.568,262,2.568,263,2.568,264,2.568,265,2.568,266,2.568,267,3.671,268,3.671,269,3.671,270,3.671,271,3.671,272,3.671,273,4.676,274,4.248,275,2.041,276,3.671,277,3.671,278,2.568,279,3.671,280,2.568,281,3.671,282,2.568]],["title/classes/GetUsersParamDto.html",[13,0.057,283,1.686]],["body/classes/GetUsersParamDto.html",[3,0.448,4,0.391,5,0.391,7,0.678,8,0.037,12,0.448,13,0.09,16,0.026,17,0.026,45,0.712,48,0.963,79,1.456,80,2.156,85,3.431,91,2.553,126,1.425,129,1.911,139,1.425,140,2.614,142,1.978,153,2.25,192,3.016,212,3.016,218,1.58,224,2.25,225,2.25,226,3.953,227,1.58,275,2.663,283,2.361,284,3.505,285,2.614,286,4.246,287,3.167,288,3.167,289,3.505,290,3.167,291,2.614,292,3.167,293,3.167]],["title/classes/PatchPostDto.html",[13,0.057,294,1.894]],["body/classes/PatchPostDto.html",[3,0.464,4,0.405,5,0.405,7,0.69,8,0.037,12,0.464,13,0.082,16,0.027,17,0.027,45,0.737,48,0.997,79,0.997,85,3.372,110,2.706,125,1.823,126,1.475,128,2.329,129,1.955,139,1.475,141,1.955,160,1.636,175,2.706,184,2.706,211,2.714,218,1.636,221,2.329,225,3.087,227,1.636,274,2.706,275,2.416,289,3.586,294,2.714,295,3.586,296,3.586,297,4.344,298,4.344,299,3.586,300,3.278,301,3.278,302,2.706,303,2.706,304,3.278]],["title/classes/PatchUserDto.html",[13,0.057,305,1.894]],["body/classes/PatchUserDto.html",[3,0.575,4,0.502,5,0.502,7,0.706,8,0.037,12,0.575,13,0.076,16,0.031,17,0.031,126,1.829,221,2.887,255,2.259,257,2.887,296,4.113,302,3.354,305,3.112,306,3.354,307,4.982,308,3.354,309,3.354,310,3.354]],["title/controllers/PostsController.html",[0,1.12,311,1.894]],["body/controllers/PostsController.html",[0,0.76,2,0.76,3,0.291,4,0.254,5,0.254,7,0.639,8,0.037,9,0.513,12,0.291,13,0.039,14,1.462,15,0.926,16,0.019,17,0.019,45,0.463,46,1.556,48,1.145,50,1.879,51,1.391,52,1.027,57,1.462,70,2.896,77,2.094,78,2.094,79,1.145,80,1.695,90,1.285,92,1.285,118,1.948,125,2.643,139,1.695,141,2.344,147,3.469,160,2.097,227,1.027,294,2.969,299,2.575,303,2.575,311,1.948,312,1.699,313,1.699,314,3.119,315,3.119,316,3.119,317,2.058,318,3.119,319,3.119,320,2.216,321,3.119,322,4.202,323,4.202,324,3.119,325,2.058,326,2.058,327,3.119,328,2.058,329,3.119,330,2.058,331,2.575,332,2.058,333,3.119,334,3.119,335,3.469,336,2.058,337,2.058,338,1.699,339,1.462,340,2.575,341,1.879,342,1.699,343,3.109,344,3.109,345,1.699,346,2.058,347,2.058,348,2.058,349,2.058,350,2.058,351,2.058,352,2.058,353,2.058,354,2.575,355,2.575,356,2.058,357,2.058,358,2.058,359,2.058]],["title/modules/PostsModule.html",[18,1.12,31,1.686]],["body/modules/PostsModule.html",[2,1.6,3,0.462,4,0.403,5,0.403,7,0.733,8,0.037,9,0.814,12,0.462,13,0.061,16,0.027,17,0.027,18,1.796,20,1.469,21,1.469,22,1.815,23,1.815,24,1.469,25,2.704,26,1.815,31,3.192,32,2.494,33,2.409,34,1.815,35,1.815,37,2.706,68,2.694,311,3.037,341,2.765,342,2.694,360,2.694,361,2.694,362,3.264,363,3.264,364,3.264]],["title/injectables/PostsService.html",[42,1.12,341,1.513]],["body/injectables/PostsService.html",[3,0.382,4,0.333,5,0.333,7,0.538,8,0.038,9,0.672,12,0.382,13,0.051,15,1.214,16,0.023,17,0.023,42,1.404,43,1.5,45,0.607,46,1.897,48,1.156,50,1.346,51,1.626,52,1.897,70,2.448,73,2.375,75,1.947,77,2.114,78,2.114,79,1.156,80,1.711,88,1.917,89,2.227,91,2.784,92,2.375,94,1.685,96,2.701,108,1.917,111,2.227,130,3.947,138,2.227,192,1.917,313,2.227,331,2.227,341,1.897,365,2.227,366,3.139,367,2.698,368,2.698,369,3.802,370,3.802,371,2.698,372,1.917,373,2.698,374,2.698,375,2.698,376,2.227,377,3.139,378,2.698,379,2.698,380,2.698,381,2.698,382,3.635,383,4.403,384,2.698]],["title/injectables/UserService.html",[42,1.12,75,1.235]],["body/injectables/UserService.html",[3,0.301,4,0.262,5,0.262,7,0.543,8,0.038,9,0.529,12,0.301,13,0.04,15,0.955,16,0.02,17,0.02,42,1.179,43,1.18,45,0.477,46,1.593,48,1.167,50,1.593,51,1.69,52,2.13,58,2.635,59,2.246,66,1.326,70,2.674,71,1.752,73,1.994,75,1.3,77,2.134,78,2.134,79,1.167,80,1.727,85,3.004,87,2.726,88,1.508,90,1.326,91,1.915,92,1.994,93,1.752,94,1.326,96,2.268,101,1.752,108,1.508,122,1.752,123,1.752,166,1.752,245,1.752,249,1.508,258,3.523,275,2.855,283,2.674,291,1.752,339,1.508,366,3.168,372,1.508,377,1.752,385,1.752,386,3.192,387,2.122,388,2.122,389,2.122,390,3.168,391,2.726,392,2.122,393,3.192,394,2.122,395,1.752,396,1.752,397,2.122,398,2.122,399,3.192,400,2.122,401,2.122,402,1.752,403,2.122,404,2.122,405,2.122,406,2.122,407,2.122,408,2.122,409,2.122,410,2.122,411,2.122,412,2.122,413,2.122,414,2.122,415,2.122,416,2.122,417,2.122,418,2.122,419,2.122,420,2.122]],["title/controllers/UsersController.html",[0,1.12,421,1.894]],["body/controllers/UsersController.html",[0,0.616,2,0.616,3,0.236,4,0.206,5,0.206,7,0.617,8,0.037,9,0.416,12,0.236,13,0.031,15,0.75,16,0.016,17,0.016,45,0.375,46,1.322,48,1.002,50,1.644,51,0.616,52,2.043,57,1.185,70,2.717,73,1.041,75,1.079,77,1.832,78,2.277,79,1.39,80,1.483,90,1.041,91,0.832,94,1.041,105,2.186,118,1.041,139,1.483,141,1.689,142,2.344,153,2.667,154,3.098,160,2.175,227,0.832,249,1.882,255,2.541,275,2.973,283,2.424,305,2.962,310,2.186,320,1.882,335,2.186,338,1.376,339,1.882,340,2.72,343,2.186,344,2.186,345,1.376,354,1.376,355,2.186,376,2.186,390,3.599,391,3.369,395,1.376,396,1.376,402,3.38,421,1.654,422,1.376,423,4.359,424,2.649,425,3.295,426,2.649,427,1.667,428,1.667,429,1.667,430,1.667,431,2.649,432,2.649,433,2.649,434,2.649,435,1.667,436,2.649,437,2.649,438,1.667,439,2.649,440,2.649,441,2.649,442,1.667,443,2.649,444,2.649,445,1.667,446,1.667,447,1.667,448,3.295,449,1.667,450,1.667,451,1.667,452,1.376,453,3.295,454,1.667,455,1.667,456,1.667,457,1.667,458,1.667,459,1.667,460,1.667,461,1.667,462,1.667,463,1.667,464,1.667,465,1.667,466,1.667,467,1.667,468,1.667,469,1.667,470,1.667]],["title/modules/UsersModule.html",[18,1.12,32,1.365]],["body/modules/UsersModule.html",[2,1.577,3,0.452,4,0.395,5,0.395,7,0.727,8,0.037,9,0.796,12,0.452,13,0.06,16,0.026,17,0.026,18,1.776,20,1.438,21,1.438,22,1.776,23,1.776,24,1.438,25,2.675,26,2.675,30,2.131,32,2.531,33,2.374,34,1.776,35,1.776,37,1.995,66,2.667,75,2.418,421,3.004,452,2.636,471,2.636,472,2.636,473,2.636,474,3.194,475,3.194,476,3.194]],["title/coverage.html",[477,2.929]],["body/coverage.html",[0,1.8,1,1.761,5,0.349,6,2.328,8,0.037,10,1.407,13,0.1,16,0.024,17,0.024,24,1.269,42,1.8,44,2.328,55,1.761,56,2.328,59,1.269,69,2.328,75,1.149,79,0.857,91,1.407,116,2.004,125,1.568,127,2.787,128,2.787,141,1.269,150,1.761,222,2.004,251,2.328,255,1.568,256,2.328,257,2.787,283,1.568,284,2.328,285,2.328,294,1.761,295,2.328,305,1.761,306,2.328,311,1.761,312,2.328,320,2.004,341,1.407,365,2.328,385,2.328,421,1.761,422,2.328,477,2.004,478,2.82,479,2.82,480,5.931,481,4.875,482,4.51,483,4.875,484,2.328,485,2.82,486,3.922,487,2.82,488,2.82,489,2.82,490,2.82]],["title/dependencies.html",[21,1.639,491,2.096]],["body/dependencies.html",[8,0.038,9,0.965,13,0.091,16,0.03,17,0.03,21,1.743,218,1.933,224,2.752,227,1.933,308,3.197,309,3.197,492,3.873,493,3.873,494,5.274,495,3.873,496,3.873,497,3.873,498,3.873,499,3.873,500,3.873,501,3.873,502,3.873,503,3.873,504,3.873,505,3.873,506,3.873]],["title/miscellaneous/enumerations.html",[507,1.586,508,3.007]],["body/miscellaneous/enumerations.html",[8,0.037,16,0.029,17,0.029,45,0.84,121,3.689,133,3.904,141,2.129,167,3.904,196,3.904,391,3.36,507,2.335,508,3.085,509,3.738,510,3.738,511,3.738,512,4.73,513,4.73,514,4.73,515,3.738,516,4.73,517,4.73]],["title/miscellaneous/functions.html",[507,1.586,518,3.007]],["body/miscellaneous/functions.html",[8,0.033,16,0.033,17,0.033,24,2.542,45,1.019,484,3.741,507,2.831,518,3.741,519,4.532]],["title/index.html",[45,0.571,520,2.539,521,2.539]],["body/index.html",[4,0.367,8,0.037,16,0.025,17,0.025,142,2.893,160,1.48,240,3.823,242,2.448,372,2.107,382,3.352,477,2.107,522,2.965,523,2.965,524,4.061,525,2.965,526,2.965,527,2.965,528,2.965,529,2.965,530,2.965,531,2.965,532,2.965,533,2.965,534,5.516,535,2.965,536,2.965,537,2.965,538,5.387,539,2.965,540,2.965,541,4.061,542,2.965,543,2.965,544,2.965,545,2.965,546,4.061,547,2.965,548,2.965,549,2.965,550,4.061,551,4.061,552,2.965,553,2.965,554,2.965,555,2.965,556,2.965,557,2.448,558,2.965,559,2.965,560,2.965,561,2.965,562,2.965,563,2.965,564,2.965,565,2.965,566,2.965,567,2.448,568,2.965,569,2.965,570,2.965,571,2.965,572,2.965,573,2.965,574,2.448]],["title/modules.html",[20,1.856]],["body/modules.html",[8,0.031,16,0.031,17,0.031,19,2.624,20,1.891,30,2.096,31,2.336,32,1.891,557,4.69,575,5.682,576,5.682,577,5.682]],["title/overview.html",[578,3.403]],["body/overview.html",[2,1.113,8,0.036,10,2.33,16,0.025,17,0.025,18,1.113,19,3.611,20,1.356,21,1.356,22,1.676,23,1.676,24,1.356,25,1.676,26,1.676,27,2.487,28,2.487,29,2.487,30,2.701,31,3.08,32,2.493,33,2.283,34,1.676,35,1.676,43,1.676,59,2.493,62,2.487,63,2.487,64,2.487,75,2.256,114,3.854,126,1.356,341,2.33,360,2.487,361,2.487,471,2.487,472,2.487,473,2.487,578,2.487,579,3.013]],["title/properties.html",[129,1.639,491,2.096]],["body/properties.html",[8,0.037,16,0.032,17,0.032,129,2.003,160,2.221,567,3.674,574,3.674,580,4.451,581,4.451,582,4.451]],["title/routes.html",[583,3.403]],["body/routes.html",[8,0.034,16,0.034,17,0.034,583,3.907]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["0",{"_index":480,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":581,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":501,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":504,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":500,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":481,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":487,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":482,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":486,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":483,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":488,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["1.1.25",{"_index":493,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":458,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":494,"title":{},"body":{"dependencies.html":{}}}],["10})@apiquery({name",{"_index":442,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":418,"title":{},"body":{"injectables/UserService.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":287,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16t07:46:32+0000",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{},"classes/PatchPostDto.html":{}}}],["2.0.5",{"_index":496,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":335,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":322,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["3",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["4",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{},"overview.html":{}}}],["6",{"_index":579,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":499,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":506,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["9",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["above",{"_index":374,"title":{},"body":{"injectables/PostsService.html":{}}}],["access",{"_index":375,"title":{},"body":{"injectables/PostsService.html":{}}}],["additionaly",{"_index":416,"title":{},"body":{"injectables/UserService.html":{}}}],["alice",{"_index":419,"title":{},"body":{"injectables/UserService.html":{}}}],["amazing",{"_index":558,"title":{},"body":{"index.html":{}}}],["another",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{}}}],["api",{"_index":444,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":343,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":318,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({example",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":453,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiquery({name",{"_index":438,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":344,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse({status",{"_index":435,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags",{"_index":345,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":349,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":456,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":536,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":434,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":530,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arbitary",{"_index":417,"title":{},"body":{"injectables/UserService.html":{}}}],["array",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["auth",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["auth.controller",{"_index":67,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":55,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["authentication",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":567,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":59,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["backers",{"_index":559,"title":{},"body":{"index.html":{}}}],["base",{"_index":411,"title":{},"body":{"injectables/UserService.html":{}}}],["based",{"_index":437,"title":{},"body":{"controllers/UsersController.html":{}}}],["blog",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{}}}],["body",{"_index":338,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":577,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":575,"title":{},"body":{"modules.html":{}}}],["building",{"_index":525,"title":{},"body":{"index.html":{}}}],["case",{"_index":291,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/UserService.html":{}}}],["character",{"_index":273,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":62,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":63,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":64,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":360,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":362,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":361,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":471,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":472,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":473,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["compodoc/compodoc",{"_index":492,"title":{},"body":{"dependencies.html":{}}}],["console.log(createpostdto",{"_index":357,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(createuserdto",{"_index":465,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(isauth",{"_index":404,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(patchpostdto",{"_index":359,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":73,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["constructor(authservice",{"_index":387,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{}}}],["constructor(userservice",{"_index":74,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(usersservices",{"_index":367,"title":{},"body":{"injectables/PostsService.html":{}}}],["content",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["content'})@isstring()@isoptional",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":348,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":455,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":477,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["created",{"_index":324,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":356,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":125,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":150,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["creates",{"_index":319,"title":{},"body":{"controllers/PostsController.html":{}}}],["createuserdto",{"_index":255,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createusers",{"_index":424,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":464,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":427,"title":{},"body":{"controllers/UsersController.html":{}}}],["data",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UserService.html":{}}}],["date",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["db",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["defaultvaluepipe",{"_index":449,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":462,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":460,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{}}}],["description",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["description:\"get",{"_index":292,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["dev@fo.com",{"_index":407,"title":{},"body":{"injectables/UserService.html":{}}}],["development",{"_index":537,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":478,"title":{},"body":{"coverage.html":{}}}],["draft",{"_index":512,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["draft','scheduled','review','published",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["draft','scheduled','review','published''})@isenum(poststatus)@isnotempty",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto",{"_index":399,"title":{},"body":{"injectables/UserService.html":{}}}],["dto/create",{"_index":346,"title":{},"body":{"controllers/PostsController.html":{}}}],["dto/patch",{"_index":347,"title":{},"body":{"controllers/PostsController.html":{}}}],["dtos/create",{"_index":450,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/get",{"_index":395,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/patch",{"_index":451,"title":{},"body":{"controllers/UsersController.html":{}}}],["e2e",{"_index":547,"title":{},"body":{"index.html":{}}}],["each",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":526,"title":{},"body":{"index.html":{}}}],["emai",{"_index":406,"title":{},"body":{"injectables/UserService.html":{}}}],["email",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["endpoints",{"_index":469,"title":{},"body":{"controllers/UsersController.html":{}}}],["entries",{"_index":439,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":508,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/posttype.enum",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["error",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["example:1234",{"_index":293,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["exist",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{}}}],["existence",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{}}}],["existing",{"_index":334,"title":{},"body":{"controllers/PostsController.html":{}}}],["exit",{"_index":381,"title":{},"body":{"injectables/PostsService.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":498,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":296,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["featured",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["fetched",{"_index":436,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":431,"title":{},"body":{"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["find",{"_index":377,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["findall",{"_index":366,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["findall(getusersparamdto",{"_index":389,"title":{},"body":{"injectables/UserService.html":{}}}],["findall(userid",{"_index":370,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":386,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":393,"title":{},"body":{"injectables/UserService.html":{}}}],["firstname",{"_index":258,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["firstname,email",{"_index":415,"title":{},"body":{"injectables/UserService.html":{}}}],["following",{"_index":414,"title":{},"body":{"injectables/UserService.html":{}}}],["forwardref",{"_index":66,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["framework",{"_index":524,"title":{},"body":{"index.html":{}}}],["function",{"_index":485,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":518,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":457,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":430,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":329,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":47,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":352,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":328,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":520,"title":{"index.html":{}},"body":{}}],["getusers",{"_index":425,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":429,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":283,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["gonna",{"_index":378,"title":{},"body":{"injectables/PostsService.html":{}}}],["grow",{"_index":554,"title":{},"body":{"index.html":{}}}],["hello",{"_index":53,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":372,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["http://localhost:8000/users",{"_index":454,"title":{},"body":{"controllers/UsersController.html":{}}}],["https",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://images.app.goo.gl/ti1eyxpvmtspz5gm6",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://images.app.goo.gl/ti1eyxpvmtspz5gm6'})@isoptional()@isurl",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":571,"title":{},"body":{"index.html":{}}}],["i'll",{"_index":412,"title":{},"body":{"injectables/UserService.html":{}}}],["id",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"coverage.html":{}}}],["image",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":45,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["inject",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":42,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":43,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["injection",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{}}}],["installation",{"_index":533,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":535,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":466,"title":{},"body":{"controllers/UsersController.html":{}}}],["intermodule",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{}}}],["inwonderland@do.com",{"_index":420,"title":{},"body":{"injectables/UserService.html":{}}}],["isarray",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":71,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["isemail",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":289,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isint()@isnotempty",{"_index":300,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isemail",{"_index":260,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isoptional",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isjson",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":252,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(56",{"_index":262,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(56",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["jhon",{"_index":405,"title":{},"body":{"injectables/UserService.html":{}}}],["join",{"_index":561,"title":{},"body":{"index.html":{}}}],["js",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["json",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":568,"title":{},"body":{"index.html":{}}}],["key",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{}}}],["lastname",{"_index":259,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":574,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":551,"title":{},"body":{"index.html":{}}}],["limit",{"_index":390,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["list",{"_index":432,"title":{},"body":{"controllers/UsersController.html":{}}}],["localhost:8000/posts/:userid",{"_index":351,"title":{},"body":{"controllers/PostsController.html":{}}}],["login",{"_index":72,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{}}}],["make",{"_index":400,"title":{},"body":{"injectables/UserService.html":{}}}],["matches",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["maxlength",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(56",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["message",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metadata",{"_index":503,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["method",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{}}}],["methods",{"_index":46,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["minimum",{"_index":271,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":507,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":550,"title":{},"body":{"index.html":{}}}],["mode",{"_index":541,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":564,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":569,"title":{},"body":{"index.html":{}}}],["n",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["name",{"_index":78,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["need",{"_index":373,"title":{},"body":{"injectables/PostsService.html":{}}}],["needs",{"_index":298,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["nestframework",{"_index":573,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":495,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":308,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":497,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":320,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["node",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["node.js",{"_index":523,"title":{},"body":{"index.html":{}}}],["now",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["npm",{"_index":534,"title":{},"body":{"index.html":{}}}],["number",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["obj",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["object",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UserService.html":{}}}],["one",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["open",{"_index":552,"title":{},"body":{"index.html":{}}}],["option",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":80,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["options.dto",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto.ts",{"_index":251,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":253,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.dto.ts:9",{"_index":254,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":578,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":491,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":391,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":339,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":396,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["param.dto.ts",{"_index":285,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:14",{"_index":288,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":77,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["parseintpipe",{"_index":448,"title":{},"body":{"controllers/UsersController.html":{}}}],["partialtype",{"_index":302,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":297,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":307,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["passed",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":340,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":294,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuser",{"_index":426,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":470,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":446,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":305,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":441,"title":{},"body":{"controllers/UsersController.html":{}}}],["person",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\"\\r\\n",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["plain",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{}}}],["please",{"_index":562,"title":{},"body":{"index.html":{}}}],["position",{"_index":443,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post','page','story','series",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post','page','story','series''})@isenum(posttype)@isnotempty",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@apiresponse({status",{"_index":321,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@matches(/^[a",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@isnotempty()@minlength(4",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto",{"_index":303,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:100",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:126",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:13",{"_index":301,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:28",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:36",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:48",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:56",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:64",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:74",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:82",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:90",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts.controller",{"_index":364,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":311,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":31,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":341,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["production",{"_index":543,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":522,"title":{},"body":{"index.html":{}}}],["project",{"_index":553,"title":{},"body":{"index.html":{}}}],["properties",{"_index":129,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"properties.html":{}}}],["provider/auth.service",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/posts.service",{"_index":342,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/user.service",{"_index":452,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":70,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["published",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishedon",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pumkin@vag.com",{"_index":409,"title":{},"body":{"injectables/UserService.html":{}}}],["pumpkin",{"_index":408,"title":{},"body":{"injectables/UserService.html":{}}}],["query",{"_index":402,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["query('limit",{"_index":459,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":461,"title":{},"body":{"controllers/UsersController.html":{}}}],["question",{"_index":398,"title":{},"body":{"injectables/UserService.html":{}}}],["r",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":563,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["reflect",{"_index":502,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":433,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":532,"title":{},"body":{"index.html":{}}}],["request",{"_index":468,"title":{},"body":{"controllers/UsersController.html":{}}}],["required",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"routes.html":{}}}],["return",{"_index":52,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["returned",{"_index":440,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":50,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["review",{"_index":514,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["route",{"_index":350,"title":{},"body":{"controllers/PostsController.html":{}}}],["routes",{"_index":583,"title":{"routes.html":{}},"body":{"routes.html":{}}}],["run",{"_index":538,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":505,"title":{},"body":{"dependencies.html":{}}}],["sample_token",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["scalable",{"_index":527,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":513,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["schema",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["schema.org",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sent",{"_index":467,"title":{},"body":{"controllers/UsersController.html":{}}}],["seprate",{"_index":401,"title":{},"body":{"injectables/UserService.html":{}}}],["serialize",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":517,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":528,"title":{},"body":{"index.html":{}}}],["service",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["side",{"_index":529,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simply",{"_index":413,"title":{},"body":{"injectables/UserService.html":{}}}],["slug",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["small",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["spaces",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["special",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":286,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":556,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":519,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":509,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":510,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":44,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":49,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":476,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":65,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/provider/auth.service",{"_index":397,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/provider/auth.service.ts",{"_index":69,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/provider/auth.service.ts:11",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/provider/auth.service.ts:24",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/provider/auth.service.ts:5",{"_index":76,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":484,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dto/create",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dto/patch",{"_index":295,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":511,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":515,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:16",{"_index":330,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:28",{"_index":326,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:40",{"_index":337,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":363,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":365,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:10",{"_index":371,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:5",{"_index":368,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":256,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":284,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":306,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/user.service",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/user.service.ts",{"_index":385,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/providers/user.service.ts:11",{"_index":392,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:39",{"_index":394,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.service.ts:5",{"_index":388,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/users.controller.ts",{"_index":422,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:49",{"_index":445,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:58",{"_index":428,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:64",{"_index":447,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":474,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":539,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":542,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":544,"title":{},"body":{"index.html":{}}}],["started",{"_index":521,"title":{"index.html":{}},"body":{}}],["starter",{"_index":531,"title":{},"body":{"index.html":{}}}],["statements",{"_index":479,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":565,"title":{},"body":{"index.html":{}}}],["story",{"_index":516,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["string",{"_index":51,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["successfully",{"_index":355,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@patch",{"_index":336,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully'})@post",{"_index":325,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":354,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":557,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":576,"title":{},"body":{"modules.html":{}}}],["table",{"_index":490,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":489,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":304,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["tags",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["test",{"_index":382,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["test:covsupport",{"_index":549,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":548,"title":{},"body":{"index.html":{}}}],["tests",{"_index":546,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":555,"title":{},"body":{"index.html":{}}}],["thats",{"_index":290,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["this.authservice.isauth",{"_index":403,"title":{},"body":{"injectables/UserService.html":{}}}],["this.postsservice.findall(userid",{"_index":353,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.userservice.findonebyid('1234",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservices.findall(getusersparamdto",{"_index":463,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservices.findonebyid(userid",{"_index":379,"title":{},"body":{"injectables/PostsService.html":{}}}],["thrown",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tile",{"_index":383,"title":{},"body":{"injectables/PostsService.html":{}}}],["tile2",{"_index":384,"title":{},"body":{"injectables/PostsService.html":{}}}],["till",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["title",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["token",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":566,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["true})@isarray()@isstring({each",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["trying",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{}}}],["twitter",{"_index":572,"title":{},"body":{"index.html":{}}}],["type",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["types",{"_index":309,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@minlength(3",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{}}}],["unit",{"_index":545,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":582,"title":{},"body":{"properties.html":{}}}],["update",{"_index":333,"title":{},"body":{"controllers/PostsController.html":{}}}],["updated",{"_index":299,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updatepost",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":358,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":332,"title":{},"body":{"controllers/PostsController.html":{}}}],["url",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["use",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{}}}],["user",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["user.dto",{"_index":310,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":257,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:15",{"_index":263,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":265,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:25",{"_index":261,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userid",{"_index":331,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["users",{"_index":423,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":475,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":421,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":75,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["userservices",{"_index":376,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservices",{"_index":369,"title":{},"body":{"injectables/PostsService.html":{}}}],["using",{"_index":410,"title":{},"body":{"injectables/UserService.html":{}}}],["usser",{"_index":380,"title":{},"body":{"injectables/PostsService.html":{}}}],["validate",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatenested",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["validator",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["version",{"_index":580,"title":{},"body":{"properties.html":{}}}],["void",{"_index":327,"title":{},"body":{"controllers/PostsController.html":{}}}],["want",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":540,"title":{},"body":{"index.html":{}}}],["website",{"_index":570,"title":{},"body":{"index.html":{}}}],["wether",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["without",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["world",{"_index":54,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":560,"title":{},"body":{"index.html":{}}}],["z0",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z\\d@$!%*?&]{8",{"_index":270,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*[a",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*?&])[a",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":269,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './provider/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './provider/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/provider/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/provider/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/provider/auth.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/provider/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    // injecting user service\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n  ) {} // till now this is a plain intermodule dependency injection\n  public login(email: string, password: string, id: string) {\n    //check if the user exist or not\n    // user trying to login is validate or not\n    //1- check user existence in db\n    const user = this.userService.findOneById('1234');\n    //2-login user\n    //3-returns token\n    return 'Sample_Token';\n    //4-this token is unique identifier to check the user authentication status\n  }\n  // let say we have another method\n  // this method only returns boolean value\n  // wether the user is authenticated or not\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'this is the content of the post', example: 'the post content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'featured image for your blog post', example: 'https://images.app.goo.gl/Ti1eyXPVMTSPZ5GM6'})@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:126\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postType, description: 'possible values ,'post','page','story','series''})@IsEnum(postType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'the data on which the blog post is published', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:90\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'serialize your JSON obj else a validation error will be thrown ', example: '{ \n \n \"@context \": \"https: // schema.org \", \n \n \"@type \": \"person\"\n}'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For Example - 'my-url'', example: 'my-blog-post'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all of small letters  and use only \"-\" and without spaces. for example  \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postStatus, description: 'possible values ,'draft','scheduled','review','published''})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'array tags passed as string values ', example: undefined})@IsOptional()@MinLength(3, {each: true})@IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'this is a title ', description: 'this is the title for blog  post'})@IsString()@IsNotEmpty()@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { postStatus } from '../enums/postStatus.enum';\nimport { postType } from '../enums/postType.enum';\nimport { CreatePostMetaOptionsDto } from './create-post-meta-options.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    example: 'this is a title ',\n    description: 'this is the title for blog  post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(4)\n  title: string;\n\n  @ApiProperty({\n    enum: postType,\n    description: \"possible values ,'post','page','story','series'\",\n  })\n  @IsEnum(postType)\n  @IsNotEmpty()\n  postType: postType;\n\n  @ApiProperty({\n    description: \"For Example - 'my-url'\",\n    example: 'my-blog-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all of small letters  and use only \"-\" and without spaces. for example  \"my-url\"',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: postStatus,\n    description: \"possible values ,'draft','scheduled','review','published'\",\n  })\n  @IsEnum(postStatus)\n  @IsNotEmpty()\n  status: postStatus;\n\n  @ApiPropertyOptional({\n    description: 'this is the content of the post',\n    example: 'the post content',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'serialize your JSON obj else a validation error will be thrown ',\n    example:\n      '{ \\r \\n \"@context \": \"https: // schema.org \", \\r \\n \"@type \": \"person\"\\r\\n}',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string; //schema must be a json string\n\n  @ApiPropertyOptional({\n    description: 'featured image for your blog post',\n    example: 'https://images.app.goo.gl/Ti1eyXPVMTSPZ5GM6',\n  })\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'the data on which the blog post is published',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishedOn?: Date;\n\n  @ApiPropertyOptional({\n    description: 'array tags passed as string values ',\n    example: ['nest js ', 'typescript', 'node js'],\n  })\n  @IsOptional()\n  @MinLength(3, { each: true })\n  @IsArray()\n  @IsString({ each: true })\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description:\n            'the key can be any string identifier for your meta option',\n          example: 'sidebarEnabled',\n        },\n        value: {\n          type: 'any',\n          description: 'any value that you want to save to the key',\n          example: true,\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions?: CreatePostMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(56)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(56)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8}$/, {message: 'minimum 8 character  , at least one number , one special character , one letter '})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(56)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(56)\n  lastName: string;\n\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(\n    /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8}$/,\n    {\n      message:\n        'minimum 8 character  , at least one number , one special character , one letter ',\n    },\n  )\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-user-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id ', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-user-param.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\nexport class GetUsersParamDto {\n  // in which id was optional thats we use apipropertyoptional\n  //if case if is required we will use apiProperty\n  @ApiPropertyOptional({\n    description:\"Get user with a specific id \",\n    example:1234\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'the id of the post that needs to be updated '})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/patch-post.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  // one tag\n  @ApiProperty({\n    description: 'the id of the post that needs to be updated ',\n  })\n  //2 validation\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'creates a new blog post'})@ApiResponse({status: 201, description: 'you get a 201 response if your post  is created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'update on existing blog post'})@ApiResponse({status: 200, description: 'A 200 response if the post updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dto/create-post.dto';\nimport { PatchPostDto } from './dto/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('posts')\nexport class PostsController {\n  // injecting post service\n  constructor(private readonly postsService: PostsService) {}\n  // get route\n  //Get localhost:8000/posts/:userId\n\n  @Get('/:userId?')\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  @ApiOperation({\n    summary: 'creates a new blog post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'you get a 201 response if your post  is created successfully',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    console.log(createPostDto);\n  }\n\n  @ApiOperation({\n    summary: 'update on existing blog post',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'A 200 response if the post updated successfully',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    console.log(patchPostDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersServices: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersServices\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    // inject User service\n    private readonly usersServices: UserService,\n  ) {}\n  public findAll(userId: string) {\n    // here we need the User service and  we use above and now we can access userServices\n\n    //find user now we gonna find a user\n    const user = this.usersServices.findOneById(userId);\n    // if usser exit return the posts\n    return [\n      {\n        user: user,\n        title: 'test tile',\n        content: 'test content',\n      },\n      {\n        user: user,\n        tile: 'tile tile2',\n        content: 'test content 3',\n      },\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: number; firstName: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-user-param.dto';\nimport { AuthService } from 'src/auth/provider/auth.service';\n@Injectable()\nexport class UserService {\n  constructor(\n    //injecting auth service\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n  ) {}\n  public findAll(\n    getUsersParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n    // i have a question here as we get the param from from dto\n    //why we did not make the seprate dto for query ?\n  ) {\n    //Auth service -to check wether user authenticated or not\n    const isAuth = this.authService.isAuth();\n    console.log(isAuth);\n    return [\n      {\n        firstName: 'jhon',\n        emai: 'dev@fo.com',\n      },\n      {\n        firstName: 'pumpkin',\n        email: 'pumkin@vag.com',\n      },\n    ];\n  }\n\n  /*\n    find a user  by ID \n    in case we are using data base as of now  i'll just simply return the following \n    object that is firstname,email additionaly we also want to return id .so \n    id just be an arbitary number as of now \n   */\n  public findOneById(id: string) {\n    return {\n      id: 1234,\n      firstName: 'alice',\n      email: 'inwonderland@do.com',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: ' Fetches a list of registered users on the application '})@ApiResponse({status: 200, description: 'users fetched successfully based on the query '})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the Api to return ', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Param,\n  Query,\n  Body,\n  ParseIntPipe,\n  DefaultValuePipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-user-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './providers/user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n//http://localhost:8000/users\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(\n    //injecting userServices\n    private readonly userServices: UserService,\n  ) {}\n  @Get('/:id?')\n  @ApiOperation({\n    summary: ' Fetches a list of registered users on the application ',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'users fetched successfully based on the query ',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description:\n      'The position of the page number that you want the Api to return ',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUsersParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.userServices.findAll(getUsersParamDto, limit, page);\n  }\n\n  @Post()\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    console.log(createUserDto instanceof CreateUserDto);\n\n    return 'you sent a post request  to users endPoints ';\n  }\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UserService } from './providers/user.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UserService],\n  exports: [UserService],\n  imports: [forwardRef(() => AuthModule)],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/provider/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dto/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-user-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value :  scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
